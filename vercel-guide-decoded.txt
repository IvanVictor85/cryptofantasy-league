# PROMPT: Implanta√ß√£o e Otimiza√ß√£o de Produ√ß√£o no Vercel

## üéØ OBJETIVO
Implementar uma estrat√©gia completa de implanta√ß√£o e otimiza√ß√£o para produ√ß√£o no Vercel, incluindo configura√ß√£o de build, otimiza√ß√£o de performance, monitoramento, CI/CD, edge functions e estrat√©gias de cache. Este prompt fornece um guia t√©cnico abrangente para deploy profissional no Vercel.

## üö® VERIFICA√á√ïES CR√çTICAS OBRIGAT√ìRIAS

### ‚ö†Ô∏è ANTES de fazer deploy, execute estas verifica√ß√µes para evitar falhas:

```bash
# 1. Verificar build local (CR√çTICO)
npm run build

# 2. Verificar tipos TypeScript (OBRIGAT√ìRIO)
npx tsc --noEmit

# 3. Verificar tamanho do bundle
npm run build && du -sh .next/static/chunks/

# 4. Verificar vari√°veis de ambiente
node -e "console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Configurado' : '‚ùå N√£o configurado')"

# 5. Verificar depend√™ncias de produ√ß√£o
npm audit --production

# 6. Testar em modo produ√ß√£o local
npm run start

# 7. Verificar Vercel CLI
vercel --version
```

### üîß CORRE√á√ïES CR√çTICAS DE DEPLOY:

#### 1. Configura√ß√£o Incorreta do Build
**Problema**: Build falha por configura√ß√£o incorreta
**Solu√ß√£o**: Configurar vercel.json corretamente

```json
// ‚ùå INCORRETO - Configura√ß√£o incompleta
{
  "framework": "nextjs"
}

// ‚úÖ CORRETO - Configura√ß√£o otimizada
{
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "outputDirectory": ".next",
  "installCommand": "npm ci",
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next",
      "config": {
        "maxLambdaSize": "50mb",
        "memory": 1024
      }
    }
  ],
  "functions": {
    "app/api/**": {
      "maxDuration": 30
    }
  },
  "regions": ["iad1"],
  "crons": []
}
```

#### 2. Vari√°veis de Ambiente N√£o Configuradas
**Problema**: Vari√°veis de ambiente n√£o s√£o acess√≠veis
**Solu√ß√£o**: Configurar vari√°veis no dashboard e next.config.js

```javascript
// ‚ùå INCORRETO - Vari√°veis n√£o expostas
const nextConfig = {
  reactStrictMode: true,
};

// ‚úÖ CORRETO - Vari√°veis configuradas
const nextConfig = {
  reactStrictMode: true,
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
  publicRuntimeConfig: {
    // Apenas vari√°veis p√∫blicas
    API_URL: process.env.NEXT_PUBLIC_API_URL,
  },
  serverRuntimeConfig: {
    // Vari√°veis privadas (servidor)
    DATABASE_URL: process.env.DATABASE_URL,
    SECRET_KEY: process.env.SECRET_KEY,
  },
};
```

#### 3. Edge Functions Mal Configuradas
**Problema**: Edge functions n√£o funcionam corretamente
**Solu√ß√£o**: Configurar edge runtime adequadamente

```typescript
// ‚ùå INCORRETO - Runtime n√£o especificado
export default async function handler(req: NextRequest) {
  // C√≥digo que n√£o funciona no edge
  const fs = require('fs');
  return new Response('Hello');
}

// ‚úÖ CORRETO - Edge runtime configurado
export const runtime = 'edge';

export default async function handler(req: NextRequest) {
  // C√≥digo compat√≠vel com edge runtime
  const country = req.geo?.country || 'US';
  
  return new Response(`Hello from ${country}`, {
    headers: { 'content-type': 'text/plain' },
  });
}
```

#### 4. Otimiza√ß√£o de Imagens N√£o Configurada
**Problema**: Imagens n√£o s√£o otimizadas
**Solu√ß√£o**: Configurar Next.js Image Optimization

```javascript
// ‚ùå INCORRETO - Sem otimiza√ß√£o
const nextConfig = {
  images: {
    domains: ['example.com'],
  },
};

// ‚úÖ CORRETO - Otimiza√ß√£o completa
const nextConfig = {
  images: {
    domains: ['example.com', 'cdn.example.com'],
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60,
    dangerouslyAllowSVG: false,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**.example.com',
        pathname: '/images/**',
      },
    ],
  },
};
```

## üìã PR√â-REQUISITOS

### Depend√™ncias de Deploy:
```bash
# Vercel CLI
npm install -g vercel

# Depend√™ncias de otimiza√ß√£o
npm install @vercel/analytics @vercel/speed-insights
npm install next-bundle-analyzer

# Depend√™ncias de monitoramento
npm install @vercel/og @vercel/edge-config
```

### Estrutura de Arquivos:
```
.
‚îú‚îÄ‚îÄ vercel.json              # Configura√ß√£o do Vercel
‚îú‚îÄ‚îÄ next.config.js           # Configura√ß√£o do Next.js
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ robots.txt           # SEO
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ edge/            # Edge functions
‚îÇ   ‚îú‚îÄ‚îÄ globals.css          # Estilos globais
‚îÇ   ‚îî‚îÄ‚îÄ layout.tsx           # Layout principal
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ analytics.ts         # Analytics
‚îÇ   ‚îî‚îÄ‚îÄ monitoring.ts        # Monitoramento
‚îî‚îÄ‚îÄ scripts/
    ‚îú‚îÄ‚îÄ deploy.sh            # Script de deploy
    ‚îî‚îÄ‚îÄ precheck.js          # Verifica√ß√µes pre-deploy
```

## üöÄ IMPLEMENTA√á√ÉO DO DEPLOY OTIMIZADO

### 1. Configura√ß√£o Completa do Vercel (vercel.json):

```json
{
  "version": 2,
  "framework": "nextjs",
  "buildCommand": "npm run build",
  "outputDirectory": ".next",
  "installCommand": "npm ci --production=false",
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next@latest",
      "config": {
        "maxLambdaSize": "50mb",
        "memory": 1024,
        "maxDuration": 30
      }
    }
  ],
  "functions": {
    "app/api/upload/**": {
      "maxDuration": 60
    },
    "app/api/heavy/**": {
      "maxDuration": 300,
      "memory": 3008
    }
  },
  "regions": ["iad1", "sfo1"],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        }
      ]
    },
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "no-store, max-age=0"
        }
      ]
    }
  ],
  "rewrites": [
    {
      "source": "/api/proxy/:path*",
      "destination": "https://api.external.com/:path*"
    }
  ],
  "redirects": [
    {
      "source": "/old-path",
      "destination": "/new-path",
      "permanent": true
    }
  ],
  "cleanUrls": true,
  "trailingSlash": false,
  "crons": [
    {
      "path": "/api/cron/cleanup",
      "schedule": "0 0 * * *"
    }
  ]
}
```

### 2. Configura√ß√£o Otimizada do Next.js (next.config.js):

```javascript
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  compress: true,
  
  // Otimiza√ß√µes de performance
  experimental: {
    serverComponentsExternalPackages: ['@prisma/client'],
    optimizeCss: true,
    optimizePackageImports: ['lucide-react', '@heroicons/react'],
  },

  // Configura√ß√£o de imagens
  images: {
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60,
    domains: ['example.com', 'cdn.example.com'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '*.vercel.app',
      },
    ],
  },

  // Headers de seguran√ßa
  headers: async () => [
    {
      source: '/(.*)',
      headers: [
        {
          key: 'Strict-Transport-Security',
          value: 'max-age=31536000; includeSubDomains; preload',
        },
        {
          key: 'Content-Security-Policy',
          value: "default-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline';",
        },
      ],
    },
  ],

  // Configura√ß√£o de cache
  async rewrites() {
    return [
      {
        source: '/api/cache/:path*',
        destination: '/api/:path*',
        has: [
          {
            type: 'header',
            key: 'cache-control',
            value: 'max-age=3600',
          },
        ],
      },
    ];
  },

  // Configura√ß√£o de redirects
  async redirects() {
    return [
      {
        source: '/old-dashboard',
        destination: '/dashboard',
        permanent: true,
      },
    ];
  },

  // Webpack customization
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    // Otimiza√ß√µes de bundle
    config.optimization.splitChunks = {
      chunks: 'all',
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          priority: 10,
          reuseExistingChunk: true,
        },
      },
    };

    // Aliases para reduzir tamanho do bundle
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.resolve(__dirname, './'),
    };

    return config;
  },

  // Configura√ß√£o de output
  output: 'standalone',
  
  // Configura√ß√£o de trailing slash
  trailingSlash: false,
  
  // Configura√ß√£o de env vars
  env: {
    VERCEL_ENV: process.env.VERCEL_ENV,
    VERCEL_URL: process.env.VERCEL_URL,
  },
};

module.exports = withBundleAnalyzer(nextConfig);
```

### 3. Edge Function Otimizada (app/api/edge/location/route.ts):

```typescript
export const runtime = 'edge';

import { NextRequest, NextResponse } from 'next/server';
import { geolocation } from '@vercel/edge';

export async function GET(request: NextRequest) {
  try {
    // Obter informa√ß√µes geogr√°ficas
    const geo = geolocation(request);
    
    // Headers de cache otimizados
    const headers = new Headers({
      'Content-Type': 'application/json',
      'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=60',
      'CDN-Cache-Control': 'public, s-maxage=300',
      'Vercel-CDN-Cache-Control': 'public, s-maxage=300',
    });

    // Personaliza√ß√£o baseada na localiza√ß√£o
    const response = {
      country: geo?.country || 'Unknown',
      city: geo?.city || 'Unknown',
      region: geo?.region || 'Unknown',
      latitude: geo?.latitude || null,
      longitude: geo?.longitude || null,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      timestamp: new Date().toISOString(),
    };

    return NextResponse.json(response, { headers });
  } catch (error) {
    console.error('Edge function error:', error);
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

### 4. Sistema de Monitoramento (lib/monitoring.ts):

```typescript
import { Analytics } from '@vercel/analytics/react';
import { SpeedInsights } from '@vercel/speed-insights/next';

interface PerformanceMetrics {
  FCP: number;
  LCP: number;
  FID: number;
  CLS: number;
  TTFB: number;
}

class VercelMonitoring {
  private metrics: PerformanceMetrics[] = [];

  // Enviar m√©tricas customizadas
  trackCustomMetric(name: string, value: number, unit: string = 'ms') {
    if (typeof window !== 'undefined') {
      // Usar Web Vitals API
      const metric = {
        name,
        value,
        unit,
        timestamp: Date.now(),
      };
      
      // Enviar para Vercel Analytics
      this.sendToVercelAnalytics(metric);
    }
  }

  // Monitorar Core Web Vitals
  trackWebVitals() {
    if (typeof window !== 'undefined') {
      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
        getCLS(this.onPerfEntry);
        getFID(this.onPerfEntry);
        getFCP(this.onPerfEntry);
        getLCP(this.onPerfEntry);
        getTTFB(this.onPerfEntry);
      });
    }
  }

  private onPerfEntry = (metric: any) => {
    console.log(`${metric.name}: ${metric.value}${metric.unit}`);
    
    // Enviar para Vercel Analytics
    this.sendToVercelAnalytics(metric);
  };

  private sendToVercelAnalytics(metric: any) {
    if (typeof window !== 'undefined' && window.va) {
      window.va.track('performance', metric);
    }
  }

  // Monitorar erros
  trackError(error: Error, context?: Record<string, any>) {
    console.error('Application error:', error);
    
    const errorData = {
      message: error.message,
      stack: error.stack,
      context,
      timestamp: new Date().toISOString(),
    };
    
    // Enviar para Vercel Analytics
    if (typeof window !== 'undefined' && window.va) {
      window.va.track('error', errorData);
    }
  }

  // Monitorar APIs
  trackAPICall(endpoint: string, method: string, duration: number, status: number) {
    const metric = {
      endpoint,
      method,
      duration,
      status,
      timestamp: Date.now(),
    };
    
    // Log para desenvolvimento
    if (process.env.NODE_ENV === 'development') {
      console.log(`API Call: ${method} ${endpoint} - ${duration}ms (${status})`);
    }
    
    // Enviar para analytics
    if (typeof window !== 'undefined' && window.va) {
      window.va.track('api_call', metric);
    }
  }
}

export const monitoring = new VercelMonitoring();

// Componente de monitoramento
export function MonitoringProvider({ children }: { children: React.ReactNode }) {
  return (
    <>
      {children}
      <Analytics />
      <SpeedInsights />
    </>
  );
}
```

### 5. Script de Deploy (scripts/deploy.sh):

```bash
#!/bin/bash

# Script de deploy otimizado para Vercel
set -e

echo "üöÄ Iniciando deploy para Vercel..."

# Verifica√ß√µes pr√©-deploy
echo "üîç Executando verifica√ß√µes pr√©-deploy..."

# Verificar Node.js version
NODE_VERSION=$(node --version)
echo "Node.js version: $NODE_VERSION"

# Verificar npm version
NPM_VERSION=$(npm --version)
echo "npm version: $NPM_VERSION"

# Limpar cache
echo "üßπ Limpando cache..."
rm -rf .next
rm -rf node_modules/.cache
npm cache clean --force

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
npm ci

# Verificar tipos TypeScript
echo "üîç Verificando tipos TypeScript..."
npx tsc --noEmit

# Executar testes
echo "üß™ Executando testes..."
npm test -- --passWithNoTests

# Verificar build
echo "üî® Verificando build..."
npm run build

# An√°lise de bundle (opcional)
if [ "$ANALYZE_BUNDLE" = "true" ]; then
  echo "üìä Analisando bundle..."
  ANALYZE=true npm run build
fi

# Verificar tamanho do bundle
echo "üìè Verificando tamanho do bundle..."
BUNDLE_SIZE=$(du -sh .next/static/chunks/ | cut -f1)
echo "Tamanho do bundle: $BUNDLE_SIZE"

# Deploy para Vercel
echo "üöÄ Fazendo deploy para Vercel..."

if [ "$1" = "production" ]; then
  echo "üéØ Deploy para PRODU√á√ÉO..."
  vercel --prod --confirm
else
  echo "üß™ Deploy para PREVIEW..."
  vercel --confirm
fi

echo "‚úÖ Deploy conclu√≠do com sucesso!"

# Verificar deploy
echo "üîç Verificando deploy..."
DEPLOYMENT_URL=$(vercel ls --limit 1 | grep -o 'https://[^ ]*' | head -1)
echo "URL do deployment: $DEPLOYMENT_URL"

# Teste de sa√∫de
echo "üè• Executando teste de sa√∫de..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health")
if [ "$HTTP_STATUS" = "200" ]; then
  echo "‚úÖ Teste de sa√∫de passou!"
else
  echo "‚ùå Teste de sa√∫de falhou (HTTP $HTTP_STATUS)"
  exit 1
fi

echo "üéâ Deploy completado com sucesso!"
```

### 6. Verifica√ß√µes Pre-Deploy (scripts/precheck.js):

```javascript
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class PreDeployChecker {
  constructor() {
    this.errors = [];
    this.warnings = [];
  }

  // Verificar arquivos essenciais
  checkEssentialFiles() {
    const requiredFiles = [
      'package.json',
      'next.config.js',
      'app/layout.tsx',
      'app/page.tsx',
    ];

    requiredFiles.forEach(file => {
      if (!fs.existsSync(file)) {
        this.errors.push(`Arquivo obrigat√≥rio n√£o encontrado: ${file}`);
      }
    });
  }

  // Verificar depend√™ncias
  checkDependencies() {
    try {
      execSync('npm audit --audit-level=high', { stdio: 'pipe' });
    } catch (error) {
      this.warnings.push('Vulnerabilidades encontradas nas depend√™ncias');
    }
  }

  // Verificar build
  checkBuild() {
    try {
      execSync('npm run build', { stdio: 'pipe' });
      console.log('‚úÖ Build executado com sucesso');
    } catch (error) {
      this.errors.push('Build falhou: ' + error.message);
    }
  }

  // Verificar tipos TypeScript
  checkTypeScript() {
    try {
      execSync('npx tsc --noEmit', { stdio: 'pipe' });
      console.log('‚úÖ Tipos TypeScript verificados');
    } catch (error) {
      this.errors.push('Erro de tipos TypeScript: ' + error.message);
    }
  }

  // Verificar vari√°veis de ambiente
  checkEnvironmentVariables() {
    const requiredEnvVars = [
      'DATABASE_URL',
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL',
    ];

    requiredEnvVars.forEach(envVar => {
      if (!process.env[envVar]) {
        this.errors.push(`Vari√°vel de ambiente obrigat√≥ria n√£o configurada: ${envVar}`);
      }
    });
  }

  // Verificar tamanho do bundle
  checkBundleSize() {
    const bundlePath = '.next/static/chunks/';
    if (fs.existsSync(bundlePath)) {
      const { execSync } = require('child_process');
      const size = execSync(`du -sh ${bundlePath}`, { encoding: 'utf8' });
      const sizeValue = parseFloat(size.split('\t')[0]);
      
      if (sizeValue > 50) { // 50MB
        this.warnings.push(`Bundle muito grande: ${size.trim()}`);
      }
    }
  }

  // Verificar performance
  checkPerformance() {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    // Verificar depend√™ncias pesadas
    const heavyDependencies = [
      'lodash',
      'moment',
      'jquery',
    ];
    
    heavyDependencies.forEach(dep => {
      if (packageJson.dependencies && packageJson.dependencies[dep]) {
        this.warnings.push(`Depend√™ncia pesada encontrada: ${dep}`);
      }
    });
  }

  // Executar todas as verifica√ß√µes
  async runAllChecks() {
    console.log('üîç Iniciando verifica√ß√µes pr√©-deploy...\n');
    
    this.checkEssentialFiles();
    this.checkDependencies();
    this.checkBuild();
    this.checkTypeScript();
    this.checkEnvironmentVariables();
    this.checkBundleSize();
    this.checkPerformance();
    
    // Mostrar resultados
    console.log('\nüìã Resultados das verifica√ß√µes:');
    
    if (this.errors.length > 0) {
      console.log('\n‚ùå ERROS ENCONTRADOS:');
      this.errors.forEach(error => console.log(`  - ${error}`));
    }
    
    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  AVISOS:');
      this.warnings.forEach(warning => console.log(`  - ${warning}`));
    }
    
    if (this.errors.length === 0 && this.warnings.length === 0) {
      console.log('\n‚úÖ Todas as verifica√ß√µes passaram!');
    }
    
    // Sair com erro se houver problemas cr√≠ticos
    if (this.errors.length > 0) {
      console.log('\n‚ùå Deploy n√£o pode prosseguir devido aos erros acima.');
      process.exit(1);
    }
    
    console.log('\nüöÄ Pronto para deploy!');
  }
}

// Executar verifica√ß√µes
const checker = new PreDeployChecker();
checker.runAllChecks();
```

## ‚öôÔ∏è CONFIGURA√á√ïES AVAN√áADAS

### 1. Edge Config (lib/edge-config.ts):

```typescript
import { get } from '@vercel/edge-config';

export async function getFeatureFlags() {
  try {
    const flags = await get('feature-flags');
    return flags || {};
  } catch (error) {
    console.error('Erro ao buscar feature flags:', error);
    return {};
  }
}

export async function isFeatureEnabled(feature: string): Promise<boolean> {
  try {
    const flags = await getFeatureFlags();
    return flags[feature] === true;
  } catch (error) {
    console.error(`Erro ao verificar feature ${feature}:`, error);
    return false;
  }
}
```

### 2. Middleware de Performance (middleware.ts):

```typescript
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const start = Date.now();
  
  // Headers de performance
  const response = NextResponse.next();
  
  // Adicionar headers de cache baseados na rota
  if (request.nextUrl.pathname.startsWith('/api/')) {
    response.headers.set('Cache-Control', 'no-store');
  } else if (request.nextUrl.pathname.startsWith('/static/')) {
    response.headers.set('Cache-Control', 'public, max-age=31536000, immutable');
  }
  
  // Adicionar timing header
  const duration = Date.now() - start;
  response.headers.set('X-Response-Time', `${duration}ms`);
  
  return response;
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
```

## üõ†Ô∏è TROUBLESHOOTING

### Problema 1: Build timeout
**Causa**: Build muito lento ou depend√™ncias pesadas
**Solu√ß√£o**: Otimizar depend√™ncias e usar build cache

### Problema 2: Cold start lento
**Causa**: Bundle muito grande ou muitas depend√™ncias
**Solu√ß√£o**: Code splitting e tree shaking

### Problema 3: Edge functions falham
**Causa**: C√≥digo incompat√≠vel com edge runtime
**Solu√ß√£o**: Usar apenas APIs compat√≠veis com edge

### Problema 4: Cache n√£o funciona
**Causa**: Headers incorretos ou invalida√ß√£o prematura
**Solu√ß√£o**: Configurar headers de cache corretamente

## ‚úÖ CHECKLIST FINAL DE DEPLOY

### Verifica√ß√µes Obrigat√≥rias:
- [ ] **Build**: Build local executa sem erros
- [ ] **TypeScript**: Tipos verificados sem erros
- [ ] **Testes**: Todos os testes passando
- [ ] **Vari√°veis**: Env vars configuradas no Vercel
- [ ] **Performance**: Bundle otimizado
- [ ] **Cache**: Headers de cache configurados
- [ ] **Seguran√ßa**: Headers de seguran√ßa aplicados
- [ ] **Monitoramento**: Analytics configurado
- [ ] **Edge**: Edge functions testadas
- [ ] **Dom√≠nio**: Dom√≠nio personalizado configurado

### Comandos de Valida√ß√£o Final:
```bash
# Executar verifica√ß√µes
node scripts/precheck.js

# Deploy
./scripts/deploy.sh production

# Verificar deployment
vercel ls

# Testar URLs
curl -I https://your-domain.vercel.app
```

## üéâ CONCLUS√ÉO

Este prompt implementa uma estrat√©gia completa de deploy e otimiza√ß√£o para Vercel, incluindo:
- ‚úÖ **Configura√ß√£o otimizada** para m√°xima performance
- ‚úÖ **Sistema de monitoramento** integrado
- ‚úÖ **Edge functions** para baixa lat√™ncia
- ‚úÖ **Cache inteligente** para velocidade
- ‚úÖ **Verifica√ß√µes automatizadas** pre-deploy
- ‚úÖ **Scripts de deployment** profissionais

**Monitore regularmente as m√©tricas de performance e mantenha as configura√ß√µes atualizadas!** 